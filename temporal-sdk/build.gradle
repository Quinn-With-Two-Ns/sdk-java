description = '''Temporal Workflow Java SDK'''

dependencies {
    api(platform("io.grpc:grpc-bom:$grpcVersion"))
    api(platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))
    api(platform("io.micrometer:micrometer-bom:$micrometerVersion"))

    api project(':temporal-serviceclient')
    api "com.google.code.gson:gson:$gsonVersion"
    api "io.micrometer:micrometer-core"

    implementation "com.google.guava:guava:$guavaVersion"
    api "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"

    // compileOnly and testImplementation because this dependency is needed only to work with json format of history
    // which shouldn't be needed for any production usage of temporal-sdk.
    // It's useful only for unit tests and debugging.
    // For these use-cases Temporal users can add this dep in the classpath temporary or permanently themselves.
    compileOnly "com.jayway.jsonpath:json-path:$jsonPathVersion"
    testImplementation "com.jayway.jsonpath:json-path:$jsonPathVersion"

    testImplementation project(':temporal-testing')
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"
}

if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_21)) {
    sourceSets {
        java21 {
            java {
                srcDirs = ['src/main/java21']
            }
        }
    }

    dependencies {
        java21Implementation files(sourceSets.main.output.classesDirs) { builtBy compileJava }
    }

    compileJava21Java {
        targetCompatibility = JavaVersion.VERSION_21
        sourceCompatibility = JavaVersion.VERSION_21
    }

    jar {
        into('META-INF/versions/21') {
            from sourceSets.java21.output
        }
        manifest.attributes(
                'Multi-Release': 'true'
        )
    }
}

task registerNamespace(type: JavaExec) {
    getMainClass().set('io.temporal.internal.docker.RegisterTestNamespace')
    classpath = sourceSets.test.runtimeClasspath
}

test.dependsOn 'registerNamespace'
